((3) 0 () 2 ((p+ #"/home1/ugrads/a3jf4/lab2-scratch/cs2613-journal/_src/posts/2025-01-15-2025-01-13-new-post.md" . unix) (p+ #"/home1/ugrads/a3jf4/lab2-scratch/cs2613-journal/_src/posts/2012-01-01-a-2012-blog-post.md" . unix)) () (h ! (equal) ((? . 0) f post (u . "2025-01-13-new-post") (? . 0) 1736939468 (p+ #"/home1/ugrads/a3jf4/lab2-scratch/cs2613-journal/2025/01/2025-01-13-new-post.html" . unix) (u . "/2025/01/2025-01-13-new-post.html") (u . "2025-01-15T07:05:26") (? . 1) #f (c (u . "journal")) (u . "\n<p><em>Replace this with your post text. Add one or more comma-separated Tags above. The special tag <code>DRAFT</code> will prevent the post from being published.</em></p>") #t (u . "\n<p><em>Replace this with your post text. Add one or more comma-separated Tags above. The special tag <code>DRAFT</code> will prevent the post from being published.</em></p>\n<!-- more-->")) ((? . 1) f post (u . "A 2012 blog post") (? . 1) 1736939045 (p+ #"/home1/ugrads/a3jf4/lab2-scratch/cs2613-journal/2012/01/a-2012-blog-post.html" . unix) (u . "/2012/01/a-2012-blog-post.html") (u . "2012-01-01T00:00:00") #f (? . 0) (c (u . "foo") c (u . "bar") c (u . "tag with spaces") c (u . "baz")) (u . "\n<p>Here is an example blog post.</p>\n\n<p>Everything after this paragraph &ldquo;after the break&rdquo;. On index pages and Atom feeds, it will become &ldquo;Continue reading&hellip;&rdquo;, if you configure them to include only the summary &ldquo;blurb&rdquo; before the break.</p>\n\n<pre><code>some code</code></pre>") #t (u . "\n<p>Here is an example blog post.</p>\n\n<p>Everything after this paragraph &ldquo;after the break&rdquo;. On index pages and Atom feeds, it will become &ldquo;Continue reading&hellip;&rdquo;, if you configure them to include only the summary &ldquo;blurb&rdquo; before the break.</p>\n\n<pre><code>some code</code></pre>\n<!-- more-->\n\n<p>Here&rsquo;s some <a href=\"http://bullshitipsum.com/?paragraphs=2\">Bullshit Ipsum</a>.</p>\n\n<p>Addelivery integrate ecologies e-markets standards-compliant utilize technologies aggregate addelivery viral&mdash;communities dynamic functionalities. Mindshare engineer viral A-list: cross-platform remix engage social cross-media social innovate distributed matrix experiences monetize utilize innovative. Action-items transition recontextualize sexy Cluetrain envisioneer, &ldquo;vortals communities evolve technologies sexy methodologies.&rdquo; Enhance grow compelling iterate architect matrix plug-and-play reinvent scale, distributed incentivize, extend.</p>\n\n<p>Revolutionary proactive. Target; envisioneer e-services sticky robust morph users methodologies, markets content supply-chains, granular monetize reinvent harness initiatives. Plug-and-play productize vortals integrate compelling aggregate, user-contributed, integrate web-enabled grow extend mindshare, repurpose world-class harness next-generation eyeballs solutions blogospheres extend. Rss-capable methodologies, &ldquo;vortals vertical,&rdquo; synthesize real-time user-contributed impactful utilize architect deploy ROI redefine design proactive strategic user-centric.</p>\n\n<p>Here&rsquo;s a footnote<sup><a href=\"#2012-01-01-a-2012-blog-post-footnote-1-definition\" name=\"2012-01-01-a-2012-blog-post-footnote-1-return\">1</a></sup>.</p>\n\n<h2 id=\"code-blocks\">Code blocks</h2>\n\n<p>Frog optionally uses <a href=\"http://pygments.org/\">Pygments</a> if it&rsquo;s installed to do syntax highlighting. In your markdown using backtick code blocks you can specify a language:</p>\n\n<pre><code>```language\nsome racket code\n```</code></pre>\n\n<p>That name is given to Pygments as the lexer to use.</p>\n\n<p>For example this:</p>\n\n<pre><code>```js\n/**\n * Some JavaScript\n */\nfunction foo()\n{\n    if (counter &lt;= 10)\n        return;\n    // it works!\n```</code></pre>\n\n<p>Yields this:</p>\n\n<div class=\"brush: js\">\n <div class=\"source\">\n  <table class=\"sourcetable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span>\n<span class=\"normal\">7</span>\n<span class=\"normal\">8</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"cm\">/**</span>\n<span class=\"cm\"> * Some JavaScript</span>\n<span class=\"cm\"> */</span>\n<span class=\"kd\">function</span><span class=\"w\"> </span><span class=\"nx\">foo</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">counter</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"mf\">10</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"c1\">// it works!</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>And this:</p>\n\n<pre><code>```racket\n#lang racket\n;; Finds Racket sources in all subdirs\n(for ([path (in-directory)])\n  (when (regexp-match? #rx\"[.]rkt$\" path)\n    (printf \"source file: ~a\\n\" path)))\n(symbol-&gt;string 'foo)\n```</code></pre>\n\n<p>Yields this:</p>\n\n<div class=\"brush: racket\">\n <div class=\"source\">\n  <table class=\"sourcetable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"kn\">#lang </span><span class=\"nn\">racket</span>\n<span class=\"c1\">;; Finds Racket sources in all subdirs</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/for.html#(form._((lib._racket/private/base..rkt)._for))\" style=\"color: inherit\">for</a></span><span class=\"w\"> </span><span class=\"p\">([</span><span class=\"n\">path</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/sequences.html#(def._((lib._racket/private/base..rkt)._in-directory))\" style=\"color: inherit\">in-directory</a></span><span class=\"p\">)])</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/when_unless.html#(form._((lib._racket/private/letstx-scheme..rkt)._when))\" style=\"color: inherit\">when</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/regexp.html#(def._((quote._~23~25kernel)._regexp-match~3f))\" style=\"color: inherit\">regexp-match?</a></span><span class=\"w\"> </span><span class=\"sr\">#rx\"[.]rkt$\"</span><span class=\"w\"> </span><span class=\"n\">path</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._printf))\" style=\"color: inherit\">printf</a></span><span class=\"w\"> </span><span class=\"s2\">\"source file: <a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((lib._racket/format..rkt)._~7ea))\" style=\"color: inherit\">~a</a></span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"w\"> </span><span class=\"n\">path</span><span class=\"p\">)))</span>\n<span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/symbols.html#(def._((quote._~23~25kernel)._symbol-~3estring))\" style=\"color: inherit\">symbol-&gt;string</a></span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"ss\">foo</span><span class=\"p\">)</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Notice that, for Racket, symbols with unambiguous documentation (provided by one library, or provided by several where one is <code>racket</code> or <code>racket/base</code>) are links to that documentation.</p>\n\n<p>This also works outside fenced code blocks, for symbols in backticks immediately followed by <code>[racket]</code>. Example: <code class=\"brush: racket\">printf</code>. This isn&rsquo;t official Markdown; it&rsquo;s simply a pun on link syntax and fenced code block languages. This is similar to using <code>@racket[printf]</code> in Scribble.</p>\n\n<p><code class=\"brush: racket\">symbol-&gt;string</code>.</p>\n\n<p>Here is a lambda: λ.</p>\n\n<p>Here is a lambda in code backticks: <code>λ</code>.</p>\n\n<p>And here in indented code block:</p>\n\n<pre><code>(λ () #t)</code></pre>\n\n<p>And here in fenced code block, no lang specified:</p>\n\n<pre><code>(λ () #t)</code></pre>\n\n<p>And here in fenced code block, lang = <code>racket</code>:</p>\n\n<div class=\"brush: racket\">\n <div class=\"source\">\n  <table class=\"sourcetable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._~ce~bb))\" style=\"color: inherit\">λ</a></span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"no\">#t</span><span class=\"p\">)</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>And here in fenced code block, lang = <code>scheme</code>:</p>\n\n<div class=\"brush: scheme\">\n <div class=\"source\">\n  <table class=\"sourcetable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"p\">(</span><span class=\"k\">λ</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"no\">#t</span><span class=\"p\">)</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Here&rsquo;s a simple <code>for</code> macro, written in <a href=\"http://docs.racket-lang.org/reference/stx-patterns.html\">Racket</a>:</p>\n\n<div class=\"brush: racket\">\n <div class=\"source\">\n  <table class=\"sourcetable\">\n   <tbody>\n    <tr>\n     <td class=\"linenos\">\n      <div class=\"linenodiv\">\n       <pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span></pre></div></td>\n     <td class=\"code\">\n      <div>\n       <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/misc..rkt)._define-syntax-rule))\" style=\"color: inherit\">define-syntax-rule</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/for.html#(form._((lib._racket/private/base..rkt)._for))\" style=\"color: inherit\">for</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">e1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">e2</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/private/map..rkt)._for-each))\" style=\"color: inherit\">for-each</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._~ce~bb))\" style=\"color: inherit\">λ</a></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">e2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">e1</span><span class=\"p\">))</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div>\n\n<p>Here is a code block in a list item &mdash; once upon a time this was a bug that didn&rsquo;t work:</p>\n\n<ol>\n <li>\n  <p>A list item with code.</p>\n  <div class=\"brush: python\">\n   <div class=\"source\">\n    <table class=\"sourcetable\">\n     <tbody>\n      <tr>\n       <td class=\"linenos\">\n        <div class=\"linenodiv\">\n         <pre><span class=\"normal\">1</span></pre></div></td>\n       <td class=\"code\">\n        <div>\n         <pre><span></span><span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">))</span>\n</pre></div></td></tr></tbody></table></div>\n\n</div></li>\n <li>Another list item.</li></ol>\n\n<p>The end.</p>\n\n<div class=\"footnotes\">\n <ol>\n  <li id=\"2012-01-01-a-2012-blog-post-footnote-1-definition\" class=\"footnote-definition\">\n   <p>Footnote definition.&nbsp;<a href=\"#2012-01-01-a-2012-blog-post-footnote-1-return\">↩</a></p></li></ol></div>"))))